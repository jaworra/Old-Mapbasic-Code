' Definition File 	Sub Routine
' Project	        
' Programmer:       John Worrall
' Last UpDate:      08/11/2012      
' Version:          AppVersion (see below)
' Description:      Polyline Create and Attribute assignement for NPI line generation
'					
' Function Arguments
' > 

include "menu.def"
include "mapbasic.def"
include "icons.def"

Declare Sub Main
Declare Sub ImportCSV 
Declare Function TimerPrint(ByVal StartTimer As Integer) As String

Sub Main
Create ButtonPad "NPI_Polyline" As 
	PushButton 
		HelpMsg "Choose this button to display query dialog" 
		Calling ImportCSV
		Icon MI_ICON_ZOOM_QUESTION 			
	Title "Utilities" 
	Width 3
	Show 
	
End Sub


Sub ImportCSV
Print Chr$(12) 'Clear Output

Dim CreateTable As String
Dim CreateTableName As String
Dim Poly_File As String
Dim LogFile As String
Dim LogFilGen As Logical
Dim ReadLine As String

'Attributes
Dim IDAtt As String
Dim DescrAtt As String
Dim TypeAtt As String
Dim CoordsAtt As String

Dim FirCol As Integer
Dim SecCol As Integer
Dim ThirCol As Integer
Dim StringLen As Integer

Dim Quote1 As Integer
Dim Quote2 As Integer 

Dim CordStart As Integer
Dim CordEnd As Integer
Dim CordTemp As String
Dim CordLenth As Integer
Dim CordEndBol As Integer
Dim LatLine,LongLine As Float
Dim CordCounter As Integer
Dim CoordTrue As Logical

Dim StartTimer As Integer
Dim StartTime As Time
Dim StartDate As Date
Dim StartDT As datetime

'Initialise Time
StartTimer = Timer()
StartTime = Time (24)
StartDate = CurDate()
StartDT = MakeDateTime(StartDate,StartTime)

Dim LoopCounter As Integer
LoopCounter =0
Dim StartNode As Integer

Dim Polyline As object
Create Pline Into Variable Polyline 0
Pen MakePen(2, 2, RGB(0, 128, 0))	

Close all

'User Input
Poly_File = FileOpenDlg("","","csv","Open CSV Table")
CreateTableName	= PathToTableName$(Poly_File) 
LogFile = PathToDirectory$(Poly_File)+"ErrorLog_"+CreateTableName+".log"
CreateTable = FileSaveAsDlg("",CreateTableName,"tab","Save Table")

'User selects cancel
If Poly_File = "" Or CreateTable = "" Then
Exit Sub
End If

'Log file
Open File LogFile
For Output As #2
LogFilGen = False
Print #2, "-----  Processing Commenced  ----- "
Print #2, "##"+FormatDate$(GetDate(StartDate))+" "+FormatTime$(GetTime(StartTime), "hh:mm:ss.fff tt")
Print #2, ""


OnError Goto CoordinateError
'Create Table 
Create Table CreateTableName
(ID Integer ,Description Char(254), Type Char(100)) 
	File CreateTable
Create Map For CreateTableName
Open Table CreateTable Interactive	
		
Open File Poly_File For Input As #1
	Do While Not EOF(1)
		Line Input #1,ReadLine
		If Not EOF(1) Then	
		
			OnError Goto CoordinateError
			LoopCounter = LoopCounter+1
			
			'Separate the line into attributes
			FirCol = InStr(1,ReadLine,",")
			SecCol = InStr(FirCol+1,ReadLine,",")
			ThirCol = InStr(SecCol+1,ReadLine,",")
			StringLen = Len(ReadLine)
		
			Quote1 = InStr(1,ReadLine,chr$(34))
			Quote2 = InStr(Quote1+1,ReadLine,chr$(34))		
			
			IDAtt = Mid$(ReadLine, 1, FirCol-1) 
			DescrAtt = Mid$(ReadLine, FirCol+1,(SecCol-FirCol-1))
			TypeAtt = Mid$(ReadLine, SecCol+1,(ThirCol-SecCol-1))
			CoordsAtt = Mid$(ReadLine, ThirCol+1, (StringLen-ThirCol))
			
			'Check to see if comma falls within a quotation - commas do not separate columns
			If (InStr(1,ReadLine,chr$(34)) > 0) Then
				
				'Reassign values
				If (FirCol > Quote1 and FirCol < Quote2) Then
					FirCol = InStr(Quote2,ReadLine,",")
					SecCol = InStr(FirCol+1,ReadLine,",")
					ThirCol = InStr(SecCol+1,ReadLine,",")
				ElseIf (SecCol > Quote1 and SecCol < Quote2) Then
					SecCol = InStr(Quote2+1,ReadLine,",")
					ThirCol = InStr(SecCol+1,ReadLine,",")
				ElseIf (thirCol > Quote1 and thirCol < Quote2) Then
					ThirCol = InStr(Quote2+1,ReadLine,",")
				End If
				
				IDAtt = Mid$(ReadLine, 1, FirCol-1) 
				DescrAtt = Mid$(ReadLine, FirCol+1,(SecCol-FirCol-1))
				TypeAtt = Mid$(ReadLine, SecCol+1,(ThirCol-SecCol-1))
				CoordsAtt = Mid$(ReadLine, ThirCol+1, (StringLen-ThirCol))

			End If
			'Run through coordinates and separate the mulinodes to generated lines	
			CordLenth = Len(CoordsAtt)
			CordTemp = CoordsAtt
			CordStart = 1
			CordEndBol = 1
			CordCounter =0
			StartNode =0
			CoordTrue = False
			'AfterCoordnateErr:
			
			'Create polyline object
			While CordEndBol = 1
				
			CordStart = 1 ' Reinitialise
			CordEnd = InStr(1,CordTemp,";")
			
			'If no ending ; then assing 0 to end Loop
			If CordEnd = 0 Then
				CordEnd = Len(CordTemp)+1
				CordEndBol = 0	
			End If

        	CordTemp = Mid$(CordTemp,CordStart,CordEnd-CordStart)		
			LatLine = Left$(CordTemp ,InStr(1,CordTemp,":")-1)
			LongLine = Right$(CordTemp ,Len(CordTemp)-InStr(1,CordTemp,":"))
			
			If (LatLine > -30 And LatLine < -8) And (LongLine > 130 And LongLine < 160 ) Then
			Alter Object Polyline
				Node Add (Right$(CordTemp ,Len(CordTemp)-InStr(1,CordTemp,":")),Left$(CordTemp ,InStr(1,CordTemp,":")-1))
				CoordTrue = True
			End If
			
			'Check to see if it is the end of line - No more : in String CordTemp
			CordStart = InStr(1,CordTemp,":")
			CordCounter = CordCounter+CordEnd
			
			'Reset
			CordTemp = Mid$(CoordsAtt,CordCounter+1, Len(CoordsAtt)-CordEnd)
		
			Wend	
			
			'If the record has a true cordinate add to row, else print to log file
			If CoordTrue = True Then
				'Insert Records
				 Insert Into CreateTableName (obj,ID,Description,Type)'(ID, Description,Type ,obj)
				 Values (Polyline,IDAtt,DescrAtt,TypeAtt)
			
				 Create Pline Into Variable Polyline 0
				 Pen MakePen(2, 2, RGB(0, 128, 0))
		    	 Commit table CreateTableName
		     Else 
		     	Open File LogFile
				For Output As #2
				Print #2, "## INVALID Coordiate - See line "+LoopCounter+" below"+ReadLine
				Print #2, LoopCounter
		     	Close File #2
		     	Print "Log File Created"
		     End IF 
			
		End If

			AfterCoordnateErr:
	Loop
	
Map From CreateTableName	
Set Map Zoom Entire Layer CreateTableName

Close File #1
Print #2, "-----  Processing Completed in "+TimerPrint(StartTimer)+"  -----" 
Close File #2

If LogFilGen = True Then
	Print "PROCESSED COMPLETED - With Errors, see log file"
Else 
	Print "PROCESSED SUCCESSFUL - No Errors"
	Kill LogFile
End If


Exit Sub

CoordinateError:
Print #2, "## INVALID LINE: "+ LoopCounter
Print #2, ReadLine
Print #2, ""
OnError GoTo 0
LogFilGen = True
Resume AfterCoordnateErr

End Sub

Function TimerPrint(ByVal StartTimer As Integer) As String
	
Dim ElapsedTimer As Integer
ElapsedTimer = Timer()-StartTimer

If ElapsedTimer > 3600 Then 
	TimerPrint = ElapsedTimer/3600 +" Hours"
ElseIf ElapsedTimer > 60 Then
	TimerPrint = ElapsedTimer/60 +" Minutes"
Else
	TimerPrint = ElapsedTimer +" Seconds"
End If	

End Function