' Definition File 	Sub Routine
' Project	        
' Programmer:       John Worralls
' Last UpDate:      23/11/2012      
' Version:          AppVersion (see below)
' Description:      Polyline Create and Attribute assignement for NPI line generation
'					
' Revision 2 includes SQL with tables ScRoads and Local Govenment boundaries
' Hard coded: 
'			 LocalGovBdy.ASGC_number = 31000 (assume user has selected the Local Government Boundaries)
'            STREET = "17A" (assume the 17A is Ipswich Hwy in user selected table)
' 			 Buffer distance is set to 20 metres (Variable = BD)
'
' Function Arguments

include "menu.def"
include "mapbasic.def"
include "icons.def"

Declare Sub Main
Declare Sub ImportCSV 
Declare Function TimerPrint(ByVal StartTimer As Integer) As String
Declare Function MotorwayRegion(Byval TempObj As Object) As String

Sub Main
Create ButtonPad "NPI_Polyline" As 
	PushButton 
		HelpMsg "Choose this button to display query dialog" 
		Calling ImportCSV
		Icon MI_ICON_ZOOM_QUESTION 			
	Title "Utilities" 
	Width 3
	Show 
	
End Sub


Sub ImportCSV
Print Chr$(12) 'Clear Output

Dim CreateTable As String
Dim CreateTableName As String
Dim Poly_File As String
Dim LogFile As String
Dim LogFilGen As Logical
Dim ReadLine As String
Dim ScRoadsFile As String
Dim ScRoadsName As String
Dim ScRoadsTmpFile As String
Dim LocalGovBdyFile,DTMRBdyFile As String

'Attributest
Dim IDAtt As String
Dim DescrAtt As String
Dim TypeAtt As String
Dim NPILinkDes As String
Dim LinkType As String
Dim CoordsAtt As String

Dim FirCol,SecCol,ThirCol,FortCol,FifCol,SixCol,SevCol,EigCol,NinCol,i As Integer
Dim StringLen As Integer

Dim Quote1 As Integer
Dim Quote2 As Integer 

Dim CordStart As Integer
Dim CordEnd As Integer
Dim CordTemp As String
Dim CordLenth As Integer
Dim CordEndBol As Integer
Dim LatLine,LongLine As Float
Dim CordCounter As Integer
Dim CoordTrue As Logical

Dim StartTimer As Integer
Dim StartTime As Time
Dim StartDate As Date
Dim StartDT As datetime

Dim TempTblLoc As String

'Initialise Time
StartTimer = Timer()
StartTime = Time (24)
StartDate = CurDate()
StartDT = MakeDateTime(StartDate,StartTime)

Dim LoopCounter As Integer
LoopCounter =0
Dim StartNode As Integer

Dim Polyline,FinalPolyline As object
Create Pline Into Variable Polyline 0
Pen MakePen(2, 2, RGB(0, 128, 0))	

Close all

'User Input
Poly_File = FileOpenDlg("C:\Documents and Settings\jaworra\Desktop\NPI_MBX\","","csv","Open CSV Table")
CreateTableName	= PathToTableName$(Poly_File) 
LogFile = PathToDirectory$(Poly_File)+"ErrorLog_"+CreateTableName+".log"
CreateTable = FileSaveAsDlg("",CreateTableName,"tab","Save Table")
'ScRoadsFile = FileOpenDlg("\\Metdnw04\DATA2\spatialData\transportation\roads\stateControlled\scRoads","sc_roads","tab","Open State Controlled Rds Table")
'LocalGovBdyFile = FileOpenDlg("\\Metdnw04\DATA2\spatialData\boundaries\lga\","Local_Government_Boundaries","tab","Open Local Government Boundaries Table")
ScRoadsFile = FileOpenDlg("C:\Documents and Settings\jaworra\Desktop\NPI_MBX\Data","sc_roads","tab","Open State Controlled Rds Table")
LocalGovBdyFile = FileOpenDlg("C:\Documents and Settings\jaworra\Desktop\NPI_MBX\Data","Local_Government_Boundaries","tab","Open Local Government Boundaries Table")
'DTMRBdyFile = FileOpenDlg("C:\Documents and Settings\jaworra\Desktop\NPI_MBX\Data","Region_Boundaries","tab","Open DTMR Boundaries Table")

ScRoadsName = PathToTableName$(ScRoadsFile) 
ScRoadsTmpFile = "C:\Temp\sc_roadsAOI.tab"
TempTblLoc="C:\Temp\MotorwayTmp.tab"

'User selects cancel
If Poly_File = "" Or CreateTable = "" Then
	Exit Sub
End If

'Log file
Open File LogFile
For Output As #2
LogFilGen = False
Print #2, "-----  Processing Commenced  ----- "
Print #2, "##"+FormatDate$(GetDate(StartDate))+" "+FormatTime$(GetTime(StartTime), "hh:mm:ss.fff tt")
Print #2, ""
			
OnError Goto CoordinateError
'Create Table 
Create Table CreateTableName
'(NPI_Link_ID Integer ,STREAMS_SN Char(254), NPI_Link_Description Char(100)) 
(NPI_Link_ID Integer, NPI_Link_Description Char(254), Link_Type Char(50),Region_Code Char(20),Council_Code Char(50),Crosses_Region_Boundary Logical,Crosses_Council_Boundary Logical,SDRN Logical,Side_Street Logical)
	File CreateTable
Create Map For CreateTableName
Open Table CreateTable Interactive	
		
Open File Poly_File For Input As #1
	Print "Creating lines from csv..."
	Do While Not EOF(1)
		Line Input #1,ReadLine
		If Not EOF(1) Then	
		
			OnError Goto CoordinateError
			LoopCounter = LoopCounter+1
			'Separate the line into attributes
			FirCol=InStr(1,ReadLine,",")
			SecCol=InStr(FirCol+1,ReadLine,",")
			ThirCol=InStr(SecCol+1,ReadLine,",")
			FortCol=InStr(ThirCol+1,ReadLine,",")
			FifCol=InStr(FortCol+1,ReadLine,",")
			SixCol=InStr(FifCol+1,ReadLine,",")
			SevCol=InStr(SixCol+1,ReadLine,",")
			EigCol=InStr(SevCol+1,ReadLine,",")
			NinCol=InStr(EigCol+1,ReadLine,",")
			StringLen = Len(ReadLine)
	
			Quote1 = InStr(1,ReadLine,chr$(34))
			Quote2 = InStr(Quote1+1,ReadLine,chr$(34))		
			
			IDAtt = Mid$(ReadLine, 1, FirCol-1) 
			DescrAtt = Mid$(ReadLine, FirCol+1,(SecCol-FirCol-1))
			TypeAtt = Mid$(ReadLine, SecCol+1,(ThirCol-SecCol-1))
			NPILinkDes = Mid$(ReadLine, FortCol+1,(FifCol-FortCol-1))
			LinkType = Mid$(ReadLine, SixCol+1,(SevCol-SixCol-1))
			CoordsAtt = Mid$(ReadLine, NinCol+1, (StringLen-NinCol))

			'Check to see if comma falls within a quotation - commas do not separate columns
			'New input does not require this = assumes no quotations
			If (InStr(1,ReadLine,chr$(34)) > 0) Then
				'Reassign values
				If (FirCol > Quote1 and FirCol < Quote2) Then
					FirCol = InStr(Quote2,ReadLine,",")
					SecCol = InStr(FirCol+1,ReadLine,",")
					ThirCol = InStr(SecCol+1,ReadLine,",")
				ElseIf (SecCol > Quote1 and SecCol < Quote2) Then
					SecCol = InStr(Quote2+1,ReadLine,",")
					ThirCol = InStr(SecCol+1,ReadLine,",")
				ElseIf (thirCol > Quote1 and thirCol < Quote2) Then
					ThirCol = InStr(Quote2+1,ReadLine,",")
				End If
				IDAtt = Mid$(ReadLine, 1, FirCol-1) 
				DescrAtt = Mid$(ReadLine, FirCol+1,(SecCol-FirCol-1))
				TypeAtt = Mid$(ReadLine, SecCol+1,(ThirCol-SecCol-1))
				CoordsAtt = Mid$(ReadLine, ThirCol+1, (StringLen-ThirCol))
			End If
			
			'Run through coordinates and separate the mulinodes to generated lines	
			CordLenth = Len(CoordsAtt)
			CordTemp = CoordsAtt
			CordStart = 1
			CordEndBol = 1
			CordCounter =0
			StartNode =0
			CoordTrue = False
			'AfterCoordnateErr:
			
			'Create polyline object
			While CordEndBol = 1
				CordStart = 1 ' Reinitialise
				CordEnd = InStr(1,CordTemp,";")
				'If no ending ; then assing 0 to end Loop
				
				If CordEnd = 0 Then
					CordEnd = Len(CordTemp)+1
					CordEndBol = 0	
				End If
	
	        	CordTemp = Mid$(CordTemp,CordStart,CordEnd-CordStart)		
				LatLine = Left$(CordTemp ,InStr(1,CordTemp,":")-1)
				LongLine = Right$(CordTemp ,Len(CordTemp)-InStr(1,CordTemp,":"))
				
				If (LatLine > -30 And LatLine < -8) And (LongLine > 130 And LongLine < 160 ) Then
					Alter Object Polyline
						Node Add (Right$(CordTemp ,Len(CordTemp)-InStr(1,CordTemp,":")),Left$(CordTemp ,InStr(1,CordTemp,":")-1))
						CoordTrue = True
				End If
	
				'Check to see if it is the end of line - No more : in String CordTemp
				CordStart = InStr(1,CordTemp,":")
				CordCounter = CordCounter+CordEnd
				'Reset
				CordTemp = Mid$(CoordsAtt,CordCounter+1, Len(CoordsAtt)-CordEnd)
			Wend	
			
			'If the record has a true cordinate add to row, else print to log file
			If CoordTrue = True Then
				'Reverse order here
				FinalPolyline=Polyline
				Do Case ObjectInfo(Polyline,OBJ_INFO_TYPE)
					Case OBJ_TYPE_LINE
					Case OBJ_TYPE_PLINE 
						If ObjectInfo(Polyline,OBJ_INFO_NPNTS) > 1 Then
							For i = 1 to ObjectInfo(Polyline,OBJ_INFO_NPNTS) 'Reads line Node Coords and Reverses order to change line direction
									If i = 1 Then 
										'Create Plines first vertex
										Create Pline Into Variable FinalPolyline 1 (ObjectNodeX(Polyline,1,i),ObjectNodeY(Polyline,1,i)) Pen ObjectInfo(Polyline,OBJ_INFO_PEN)
									Else 
										'Alter Plines second and later vertexs
										Alter object FinalPolyline node add(ObjectNodeX(Polyline,1,i),ObjectNodeY(Polyline,1,i))
									End If				
							Next 	
						End If		
					Case OBJ_TYPE_REGION
				End Case				
				'Insert Records
				 Insert Into CreateTableName (obj,NPI_Link_ID,NPI_Link_Description,Link_Type)'(ID, STREAMS_SN,NPI_Link_Des ,obj)
				 Values (FinalPolyline,IDAtt,NPILinkDes,LinkType)
	
				 Create Pline Into Variable Polyline 0
				 Pen MakePen(2, 2, RGB(0, 128, 0))
		    	 'Commit table CreateTableName
		     Else 
		     	Open File LogFile
				For Output As #2
				Print #2, "## INVALID Coordiate - See line "+LoopCounter+" below"+ReadLine
				Print #2, LoopCounter
		     	Close File #2
		     	Print "Log File Created"
		     End If
		End If
			AfterCoordnateErr:		
	Loop
Commit table CreateTableName

Print "Updating link type..."
'Change code 0=Motorway, 1=Controlled
Select * from CreateTableName Where Link_Type = "0" into MotorwaySQL Noselect 
Select * from CreateTableName Where Link_Type = "1" into ControlledSQL Noselect
Update MotorwaySQL Set Link_Type ="Motorway"
Update ControlledSQL Set Link_Type ="Controlled"
Close Table MotorwaySQL 
Close Table ControlledSQL
Commit table CreateTableName

Print "Locate within Local & DTMR boundary..."
Dim rowLinkType,rowObj As Alias
Dim curObj,lastPT As Object
Dim curRowID as Integer
Dim TmpVar as string
Open Table LocalGovBdyFile As LocalGovBdy
'Open Table DTMRBdyFile As DTMRBdy 

curRowID=0
Fetch First from CreateTableName
Do While Not EOT(CreateTableName)

	rowLinkType=CreateTableName+ ".Link_Type"
	rowObj=CreateTableName+ ".obj"
	curObj=rowObj
	curRowID=curRowID+1
	 
	If rowLinkType="Controlled" Then
		'Last node poistion - no need to split segments
		Create Point Into Variable lastPT (ObjectNodeX(curObj,1,ObjectInfo(curObj,OBJ_INFO_NPNTS)),ObjectNodeY(curObj,1,ObjectInfo(curObj,OBJ_INFO_NPNTS))) 
		Select name, regionname  from LocalGovBdy where LocalGovBdy.obj intersects lastPt into RegionCodes NoSelect
		TmpVar=RegionCodes.regionname
		update CreateTableName Set Region_Code = TmpVar Where RowID=curRowID
		TmpVar=RegionCodes.name
		update CreateTableName Set Council_Code = TmpVar Where RowID=curRowID		

		
	ElseIf rowLinkType="Motorway" Then
		'Save current row into a temp table 
		'Parses current row to function to split line and return the largest segment find attributes within in polygon 
		
		Select * from CreateTableName Where RowID=curRowID into saveTemp noselect 
		If FileExists(TempTblLoc) Then
			Open table TempTblLoc As DeleteMe
			Drop table DeleteMe
		End If
		
		Commit Table saveTemp as TempTblLoc
		Close Table saveTemp
		Open Table TempTblLoc as TmpTblMotor
		TmpVar=MotorwayRegion(curObj)
		
		If InStr(1,TmpVar,"|")>1 Then 
			update CreateTableName Set Region_Code=Mid$(TmpVar,1,InStr(1,TmpVar,"|")-1) Where RowID=curRowID
			update CreateTableName Set Council_Code=Mid$(TmpVar,InStr(1,TmpVar,"|")+1,len(TmpVar)) Where RowID=curRowID
		Else
			update CreateTableName Set Region_Code=TmpVar Where RowID=curRowID	
			update CreateTableName Set Council_Code=TmpVar Where RowID=curRowID	
		End If
	End If
	
	Fetch Next From CreateTableName
Loop
Commit table CreateTableName

'Rerun here for true or false for SDRN,Crosses Regional Boundary, Croass council bounday and side street
curRowID=0
Fetch First from CreateTableName
Do While Not EOT(CreateTableName)
	curRowID=curRowID+1
	rowObj=CreateTableName+".obj"
 	curObj=rowObj
 
 	Select * from LocalGovBdy where LocalGovBdy.obj intersects curObj into CrossBdy NoSelect
 	'Change to true if it crosses Council boundary
 	If TableInfo(CrossBdy,TAB_INFO_NROWS) > 1 Then
		update CreateTableName Set Crosses_Council_Boundary="TRUE" Where RowID=curRowID	
 	End IF
 	'Change to true if it crosses DTMR boundary
 	Select * from LocalGovBdy where LocalGovBdy.obj intersects curObj into CrossBdy NoSelect Group By regioncode
 	If TableInfo(CrossBdy,TAB_INFO_NROWS) > 1 Then
		update CreateTableName Set Crosses_Region_Boundary="TRUE" Where RowID=curRowID	
 	End IF

	Fetch Next From CreateTableName
Loop
Commit table CreateTableName

Print "Creating Buffer...."
Dim BufferObject As Object
Dim SQLString As String
Dim CreateTableObject As String
Dim BD As Integer
BD=20

Close Table LocalGovBdy
Open Table ScRoadsFile as ScRoadsName 

If FileExists("C:\Temp\ScRoadsTmp.tab") Then
	Open table "C:\Temp\ScRoadsTmp.tab" As DeleteMe
	Drop table DeleteMe
End If
		
Commit Table ScRoadsName As "C:\Temp\ScRoadsTmp.tab"
Open Table "C:\Temp\ScRoadsTmp.tab" as ScRoadsBuffer
Delete from ScRoadsBuffer
Commit Table ScRoadsBuffer
Pack Table ScRoadsBuffer Graphic Data 


Fetch First From ScRoadsName
Do While Not EOT(ScRoadsName)
	rowObj=ScRoadsName+".obj"
 	curObj=rowObj
 	
	BufferObject = Buffer(curObj,20,BD,"m") 
	insert into ScRoadsBuffer(obj) values (BufferObject) 'no variables
	Fetch Next From ScRoadsName
Loop
Commit Table ScRoadsBuffer
Close Table ScRoadsName

'Side Street and SDRN 
Print "SDRN & Side Streets..."

Dim combBuffer As Object
curRowID=0
Fetch First From CreateTableName
Do While Not EOT(CreateTableName)
	curRowID=curRowID+1
	rowObj=CreateTableName+".obj"
 	curObj=rowObj	
	Select * from ScRoadsBuffer where curObj intersects ScRoadsBuffer.obj into BufferIntersect 
	If TableInfo(BufferIntersect,TAB_INFO_NROWS) > 0 Then
	'Combine buffers
	Create Object As Union From BufferIntersect Into Variable combBuffer
		'Check for SDRN
		Select * from ScRoadsBuffer where curObj Entirely within combBuffer into BufferWithin NoSelect	
		If TableInfo(BufferWithin,TAB_INFO_NROWS) > 0 Then 'If entirely within its a SC road
			update CreateTableName Set SDRN="TRUE" Where RowID=curRowID	
		Else'All else are side Streets - assumes if road is not entirely within buffer and intersects than its a side road
			update CreateTableName Set Side_Street="TRUE" Where RowID=curRowID
		End If
		Close Table BufferWithin
	End If
	Close Table BufferIntersect
	Fetch Next From CreateTableName
Loop
Commit Table CreateTableName

Exit sub
'Removal of all off shoots!???? 

'Dim BufferObject As Object
'Dim SQLString As String
'Dim CreateTableObject As String
'Dim BD As Integer
BD = 20 ' Buffer distance

'Select all roads within BCC into temporary table
Open Table LocalGovBdyFile As LocalGovBdy 'hard Coded remove
Open Table ScRoadsFile as ScRoadsName 
Select * from ScRoadsName, LocalGovBdy where LocalGovBdy.ASGC_number = 31000 and sc_roads.obj Intersects LocalGovBdy.obj into Selection ' Remove Hard Code HERE!!  
Select COL1 from Selection into Selection 'There should be a better way here!!! 
Commit Table Selection As "C:\Temp\Test.tab"
Open Table "C:\Temp\Test.tab" as Test

'Select from SCRoads Ipswich Hwy (17A), this will remain hard coded
Select * from ScRoadsName where STREET = "17A" into Selection
Select COL1 from Selection into Selection

'Append results of selection data 
Insert Into Test
	Select * from Selection
Commit Table Test

'Temporay Table
Select * from Test where RowID = 1 Into Selection  
Commit Table Selection as "C:\Temp\Test2.tab"
Open Table "C:\Temp\Test2.tab" as Test2


'Buffer Result Save ' Future works -> remove the adition TEST2 table 
Create Object As Buffer
From Test 
Into Table Test2
Width BD Units "m"
Commit Table Test2

'Final query -> for roads 17a and BCC region
SQLString = "Select * from " + CreateTableName + ","+Test2+" where "+CreateTableName+".Obj Intersects "+Test2+".obj into Selection"
Run Command SQLString


'Save result and delete temp tables
Dim ScRoadsInt as String
ScRoadsInt = PathToDirectory$(Poly_File)+CreateTableName+"_SCRoads.tab"
Commit Table Selection As ScRoadsInt
Close Table Selection

Open Table ScRoadsInt As PathToTableName$(ScRoadsInt)
Map From PathToTableName$(ScRoadsInt),CreateTableName
Set Map Zoom Entire Layer CreateTableName
Layer 1 Display Global Global Line (1,2,16776960)

'Exit
Close File #1
Print #2, "-----  Processing Completed in "+TimerPrint(StartTimer)+"  -----" 
Close File #2

If LogFilGen = True Then
	Print "PROCESSED COMPLETED - With Errors, see log file"
Else 
	Print "PROCESSED SUCCESSFUL - No Errors"
	Kill LogFile
End If

'Clean up
Close Table LocalGovBdy
Drop Table Test
Drop Table Test2

Exit Sub

CoordinateError:
Print #2, "## INVALID LINE: "+ LoopCounter
Print #2, ReadLine
Print #2, ""
OnError GoTo 0
LogFilGen = True
Resume AfterCoordnateErr

End Sub


Function MotorwayRegion(Byval TempObj As Object) As String
	'TmpTblMotor,LocalGovBdy Assume tables opened
	
	Dim j,rowKeep,largestSeg as Integer
	Dim largestSegObj as Object

	Select * from TmpTblMotor into Selection
	Set Target
	Select name, regionname from LocalGovBdy where TempObj Intersects LocalGovBdy.obj into MotorSQL
	'Select name, regionname from LocalGovBdy where TempObj Intersects LocalGovBdy.obj into MotorSQL NoSelect
	
	If TableInfo(MotorSQL,TAB_INFO_NROWS)=0 Then 
		'No Valid Result here - write out to report
		MotorwayRegion="N/A"
		Exit Function
	ElseIf TableInfo(MotorSQL,TAB_INFO_NROWS)=1 Then 
		'No analysis required here! return string
		MotorwayRegion=MotorSQL.regionname+"|"+MotorSQL.name
	ElseIf TableInfo(MotorSQL,TAB_INFO_NROWS)>1 Then 
		'Split Line by boundaries
		Objects Split Into Target
		Commit Table TmpTblMotor	
		
		'Run through each split section to find the largest segment.
		For j=1 to TableInfo(TmpTblMotor,TAB_INFO_NROWS)
			If j=1 Then 'Assume first seg is largest
				Select * from TmpTblMotor where RowID=1 into CompareSegs NoSelect
				largestSeg=ObjectLen(CompareSegs.obj,"m")
				rowKeep=1
				largestSegObj=CompareSegs.obj
				Close Table CompareSegs
			Else 'Compare all other segments
				Select * from TmpTblMotor where RowID=j into CompareSegs NoSelect
				If ObjectLen(CompareSegs.obj,"m") > largestSeg Then
					largestSeg=ObjectLen(CompareSegs.obj,"m")
					rowKeep=j
					largestSegObj=CompareSegs.obj
				End If
				Close Table CompareSegs
			End If
		Next
		Select name, regionname from LocalGovBdy where largestSegObj intersects LocalGovBdy.obj into MotorSQL NoSelect
		MotorwayRegion=MotorSQL.regionname+"|"+MotorSQL.name
	End If
	Close Table MotorSQL 
	Drop Table TmpTblMotor
End Function

Function TimerPrint(ByVal StartTimer As Integer) As String
	
Dim ElapsedTimer As Integer
ElapsedTimer = Timer()-StartTimer

If ElapsedTimer > 3600 Then 
	TimerPrint = ElapsedTimer/3600 +" Hours"
ElseIf ElapsedTimer > 60 Then
	TimerPrint = ElapsedTimer/60 +" Minutes"
Else
	TimerPrint = ElapsedTimer +" Seconds"
End If	

End Function