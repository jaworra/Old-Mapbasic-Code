' Definition File 	Sub Routine
' Project	        
' Programmer:       John Worrall
' Last UpDate:      23/11/2012      
' Version:          AppVersion (see below)
' Description:      Polyline Create and Attribute assignement for NPI line generation
'					
' Revision 3: removed SC roads and LGA analysis, updated coordinate validation to include only foat values with  
'			  minimum of 4 significant values.
'				
' Function Arguments

include "menu.def"
include "mapbasic.def"
include "icons.def"

Declare Sub Main
Declare Sub ImportCSV 
Declare Function TimerPrint(ByVal StartTimer As Integer) As String
Declare Sub ExitSub
Declare Sub AboutSub
Declare Sub ValidateLinks
Declare Sub GetAccessFileNPI
Declare Sub GetAccessFileLINK
Declare Sub SortingLinks
Declare Sub IncidentToNode
Declare Sub ValidateLineDirection

Global versionTxt As String 
Global versionDate As String 
Global numberVerticesReq As Integer
Global AccessPointFile As String

Sub Main
versionTxt =""
versionDate =""
numberVerticesReq = 2 ' The number of vertices required to fall on line 

Create Menu "NPI Links" As
	"Create Polyline form csv" Calling ImportCSV,
	"(-",
	"Sorting Algorithm" Calling SortingLinks,
	"Validate Links" Calling ValidateLinks,
	"Incidents to Node" Calling IncidentToNode,
	"Validate NPI Direction" Calling ValidateLineDirection,
	"(-",
	"About" Calling AboutSub,
	"Exit" Calling ExitSub
Alter Menu Bar Add "NPI Links"
End Sub	

Sub ValidateLineDirection
Print chr$(12)
Close all
'Set Datasets load
Open Table "C:\Documents and Settings\jaworra\Desktop\NPI\TAB\NPILinks.TAB" As NPIDataObjRef
Open Table "C:\Documents and Settings\jaworra\Desktop\NPI\TAB\Metro NPI and TN Link Relationship.TAB" As NPIandLinkTbl
Open Table "C:\Documents and Settings\jaworra\Desktop\NPI\TAB\Metro Node list 4.TAB" As NodeList
Dim NewId,i,j As Integer
Dim StartX,StartY As Float
Dim NPILinkIDFound As String

j=0
i=1
OnError Goto SkipRow
'Go through node list newID attributes 
Fetch First From NodeList
Do While Not EOT(NodeList)
	Print NodeList.New_Id
	NewId=NodeList.New_Id
	StartX=NodeList.X
	StartY=NodeList.Y

	Fetch First From NPIandLinkTbl
	Do While Not EOT(NPIandLinkTbl)
		If NewId = NPIandLinkTbl.Start_Point_Id Then
			NPILinkIDFound = NPIandLinkTbl.NPI_Link_Id
			
			Run Command "Select * from "+NPIDataObjRef+" where ID = "+NPILinkIDFound+" into QueryDist"
			If TableInfo(Selection, TAB_INFO_NROWS) = 1 Then
				'Compare distance from two coordinates to determine line direction should be reveresed. 
				Print SphericalDistance(StartX,StartY,ObjectNodeX(Selection.obj,1,1),ObjectNodeY(Selection.obj,1,1),"m")+"  Distance from point"
				
				'find the closes node point in the object
				
				
				'Selection.obj
			End If
			Close Table QueryDist
			'Exit sub
			j=j+1
			Print "Found  " +j+" of "+i
			Exit Do
		End If
		
		Fetch Next From NPIandLinkTbl
	Loop
	Fetch Rec i From NodeList
	i=i+1
	AfterError:
	Fetch Next From NodeList
Loop


Exit Sub
SkipRow:
Print "Row Error "+ NodeList.New_Id
Resume AfterError

End Sub

Sub IncidentToNode
Dim IncidentTbl, NodeTbl, ResultsTbl as String	
Dim IncidentsObj as object

ResultsTbl="C:\TEMP\ResultsNear.TAB"
'
'IncidentTbl = FileOpenDlg("G:\Geospatial\GIS\JohnW\NPI\Incidents", "", "tab", "Open any incident file")
'NodeTbl = FileOpenDlg("G:\Geospatial\GIS\JohnW\Request\ChrisW", "", "tab", "Open any Node tab file")
'
'If IncidentTbl = "" or NodeTbl = "" Then
'	Print  "Please Select a Valid File"
'	Exit Sub
'End If
Close all

IncidentTbl = "G:\Geospatial\GIS\JohnW\NPI\Incidents\New\Incidents.TAB"
NodeTbl = "G:\Geospatial\GIS\JohnW\Request\ChrisW\Metro Node list 3.TAB"

Open Table IncidentTbl as Incidents 
Open Table NodeTbl as Nodes

If fileExists(ResultsTbl)then
	Open Table ResultsTbl as DeleteMe
	Drop Table DeleteMe
End If

Commit Table Incidents As ResultsTbl
Open Table ResultsTbl As Results
Delete from Results
Commit Table Results
Pack Table Results Graphic Data

Dim IIdentifier,IType,IClassification,ITime_Logged,IRoad,IEvent_Status,IDistrict,IStart_Detected_Time,IEnd_Time,IX,IY,IRoad_Owner,IIntersection,IOpp_Link_Affected,IDirection,IVerified_Time,IAssist_Req_Time As String
Dim IAssist_Arr_Time,INo__Lanes_Blocked,ILateral_Position,IOpp_Lanes_Blocked,IBlockage_Type,IIncident_Category,ISeverity_Category,IDelay,IIncident_Cleared_Time,ITime_Logged__Date_,ITime_Logged__Time_ As String
Dim IStart_Detected_Time__Date_,IStart_Detected_Time__Time_,IEnd_Time__Date_,IEnd_Time__Time_,IVerified_Time__Date_,IVerified_Time__Time_,IAssist_Req_Time__Date_,IAssist_Req_Time__Time_,IAssist_Arr_Time__Date_ As String 
Dim IAssist_Arr_Time__Time_,IIncident_Cleared_Time__Date_,IIncident_Cleared_Time__Time_,IEnd_Time___Date,IStart_Time___Date2,IDuration As String 

Dim i as Integer

Fetch First from Incidents 
Do while Not EOT(Incidents)
	
	IncidentsObj = Incidents.obj
	IIdentifier = Incidents.col1
	IType  = Incidents.col2
	IClassification = Incidents.col3
	ITime_Logged = Incidents.col4
	IRoad = Incidents.col5
	IEvent_Status  = Incidents.col6
	IDistrict = Incidents.col7
	IStart_Detected_Time  = Incidents.col8
	IEnd_Time = Incidents.col9
	IX = Incidents.col10
	IY  = Incidents.col11
	IRoad_Owner = Incidents.col12
	IIntersection = Incidents.col13
	IOpp_Link_Affected = Incidents.col14
	IDirection = Incidents.col15
	IVerified_Time = Incidents.col16
	IAssist_Req_Time = Incidents.col17
	IAssist_Arr_Time = Incidents.col18
	INo__Lanes_Blocked = Incidents.col19
	ILateral_Position = Incidents.col20
	IOpp_Lanes_Blocked = Incidents.col21
	IBlockage_Type = Incidents.col22
	IIncident_Category = Incidents.col23
	ISeverity_Category = Incidents.col24
	IDelay = Incidents.col25
	IIncident_Cleared_Time = Incidents.col26
	ITime_Logged__Date_  = Incidents.col27
	ITime_Logged__Time_  = Incidents.col28
	IStart_Detected_Time__Date_ = Incidents.col29
	IStart_Detected_Time__Time_ = Incidents.col30
	IEnd_Time__Date_ = Incidents.col31
	IEnd_Time__Time_ = Incidents.col32
	IVerified_Time__Date_ = Incidents.col33
	IVerified_Time__Time_ = Incidents.col34
	IAssist_Req_Time__Date_ = Incidents.col35
	IAssist_Req_Time__Time_ = Incidents.col36
	IAssist_Arr_Time__Date_ = Incidents.col37
	IAssist_Arr_Time__Time_ = Incidents.col38
	IIncident_Cleared_Time__Date_ = Incidents.col39
	IIncident_Cleared_Time__Time_ = Incidents.col40
	IEnd_Time___Date = Incidents.col41
	IStart_Time___Date2 = Incidents.col42
	IDuration= Incidents.col43
	i=i+1
	
	Nearest From Variable IncidentsObj to Nodes Into Results Ignore Max 40 Units "m" Data Node_ID= Nodes.New_Id,Identifier=IIdentifier,Type=IType,Classification=IClassification,Time_Logged=ITime_Logged,Road=IRoad,Event_Status=IEvent_Status,District=IDistrict,Start_Detected_Time=IStart_Detected_Time,End_Time=IEnd_Time,X=IX,Y=IY,Road_Owner=IRoad_Owner,Intersection=IIntersection,Opp_Link_Affected=IOpp_Link_Affected,Direction=IDirection,Verified_Time=IVerified_Time,Assist_Req_Time=IAssist_Req_Time,Assist_Arr_Time=IAssist_Arr_Time,No__Lanes_Blocked=INo__Lanes_Blocked,Lateral_Position=ILateral_Position,Opp_Lanes_Blocked=IOpp_Lanes_Blocked,Blockage_Type=IBlockage_Type,Incident_Category=IIncident_Category,Severity_Category=ISeverity_Category,Delay=IDelay,Incident_Cleared_Time=IIncident_Cleared_Time,Time_Logged__Date_=ITime_Logged__Date_,Time_Logged__Time_=ITime_Logged__Time_,Start_Detected_Time__Date_=IStart_Detected_Time__Date_,Start_Detected_Time__Time_=IStart_Detected_Time__Time_,End_Time__Date_=IEnd_Time__Date_,End_Time__Time_=IEnd_Time__Time_,Verified_Time__Date_=IVerified_Time__Date_,Verified_Time__Time_=IVerified_Time__Time_,Assist_Req_Time__Date_=IAssist_Req_Time__Date_,Assist_Req_Time__Time_=IAssist_Req_Time__Time_,Assist_Arr_Time__Date_=IAssist_Arr_Time__Date_,Assist_Arr_Time__Time_=IAssist_Arr_Time__Time_,Incident_Cleared_Time__Date_=IIncident_Cleared_Time__Date_,Incident_Cleared_Time__Time_=IIncident_Cleared_Time__Time_,End_Time___Date=IEnd_Time___Date,Start_Time___Date2=IStart_Time___Date2,Duration=IDuration
	Commit Table Results
	Fetch Next From Incidents
Loop

Update Results Set Dist_m = ObjectLen(obj, "m")	
Commit Table Results
Print "Finished!"
End Sub

Sub SortingLinks
	
'Read file into temporary memory section	
Dim MetroNpiLinkRel,MetroNodeLst As String
MetroNpiLinkRel = FileOpenDlg("G:\Geospatial\GIS\JohnW\NPI\May_2013\WorkingDirectory","Metro NPI and TN Link Relationship","csv","Open Link Worksheet")
MetroNodeLst =  FileOpenDlg("G:\Geospatial\GIS\JohnW\NPI\May_2013\WorkingDirectory","Metro Node list 3","csv","Open Node Worksheet")
If MetroNpiLinkRel = "" or MetroNodeLst = "" Then
	Print  "Please Select a Valid File"
	Exit Sub
End If

Dim ReadLine,PrevReadLine,PrevNPI_LinkID As String 
Dim Count_NPI_LinkNo,Count_No_Duplic,Count_ReadLine As Integer
Dim ReadLineDup(1),ReadLineAll(1) As String

Count_ReadLine =0
Count_NPI_LinkNo =0
Count_No_Duplic =0
Print Chr$(12)
print "-----  Processing Commenced NPI Link Rel ----- "

'Read File 
Open File MetroNpiLinkRel
For Input As #1
	Do While Not EOF(1)
		Line Input #1,ReadLine
		If Not EOF(1) Then	
			Count_ReadLine = Count_ReadLine+1
			
			If Count_ReadLine <> 1 Then 'Store all lines except first
				ReDim ReadLineAll(Count_ReadLine)
				ReadLineAll(Count_ReadLine) = ReadLine
		
				'Print ID duplicated
				If Mid$(ReadLine,1, InStr(1,ReadLine,",")-1) = PrevNPI_LinkID Then
	
					'First Deplicate store the previous value
					If Count_NPI_LinkNo = 0 Then										
						Count_NPI_LinkNo = Count_NPI_LinkNo+1 'Number of same Link ID records 
						Count_No_Duplic = Count_No_Duplic+1 'Number of duplicate records
						ReDim ReadLineDup(Count_No_Duplic)
						ReadLineDup(Count_No_Duplic)= PrevReadLine		
					End If
					
					Count_NPI_LinkNo = Count_NPI_LinkNo+1 'Number of same Link ID records
					Count_No_Duplic = Count_No_Duplic+1 'Number of duplicate records
					ReDim ReadLineDup(Count_No_Duplic)
					ReadLineDup(Count_No_Duplic)= ReadLine ' One extra record in array
							
				Else
					Count_NPI_LinkNo = 0
				End If
	
				'Store all data in array
				PrevNPI_LinkID = Mid$(ReadLine,1, InStr(1,ReadLine,",")-1)
				PrevReadLine = ReadLine	
			
			End If
		
		End If
	Loop
Close File #1	

print "-----  Processing Commenced Metro Node Lst ----- "
'Read File 
Dim NewNodeLst As String
Dim ReadLineNodeLst(1) As String
Count_ReadLine =0
Open File MetroNodeLst
For Input As #1
	Do While Not EOF(1)
		Line Input #1,ReadLine
		If Not EOF(1) Then	
			Count_ReadLine = Count_ReadLine+1
			If Count_ReadLine <> 1 then
				'print ReadLine		
				'NewNodeLst = Mid$(ReadLine,1, InStr(1,ReadLine,",")-1)
				'print NewNodeLst
				ReDim ReadLineNodeLst(Count_ReadLine-1)
				ReadLineNodeLst(Count_ReadLine-1) = ReadLine
			End If
		End If
	Loop
Close File #1	


'Analysising section	
print "-----  Print Out Duplicates Array  ----- "		
'Run through stored array of duplicates
Dim i As Integer
	print UBound(ReadLineDup)
	For i = 1 to UBound(ReadLineDup)
		'print ReadLineDup(i)	
	Next
'Free Temp Memory...
ReDim ReadLineDup(0) 

print "-----  Entire Array  ----- "		
'Run through stored array of duplicates
Dim j As Integer
	print UBound(ReadLineAll)
	For j = 1 to UBound(ReadLineAll)
		print ReadLineAll(j)	
	Next
'Free Temp Memory...
ReDim ReadLineAll(0) 

print "-----  Entire Array NodeList  ----- "		
'Run through stored array of duplicates
Dim CompStoreArray as String 
Dim k As Integer
	print UBound(ReadLineNodeLst)
	For k = 1 to UBound(ReadLineNodeLst)
		'print ReadLineNodeLst(k)
		'Pull Out the ID from array
		print Mid$(ReadLineNodeLst(k),1, InStr(1,ReadLineNodeLst(k),",")-1)
		
	Next
'Free Temp Memory...
ReDim ReadLineNodeLst(0) 


'Offset values 
' Use statement offset i.e  update Line_2 set obj = Offset( obj, Line_angle, 0.2, "km")  - also explore option OffsetXY( ) function 
'Check offset angle calc.....

' Closest compare to two lines
' use nearest command... l


End Sub 

Sub GetAccessFileLINK 
AccessPointFile = FileOpenDlg("","","TAB","Open Table")
If AccessPointFile <> "" then
   Alter Control 1 value AccessPointFile
End if
End Sub

Sub GetAccessFileNPI
AccessPointFile = FileOpenDlg("","","TAB","Open Table")
If AccessPointFile <> "" then
   Alter Control 2 value AccessPointFile
End if
End Sub

	
Sub ValidateLinks
'Validate links here
Close all
Print Chr$(12)

Dim UsrLinksFileLoc As String
Dim UsrNPIFileLoc As String


Dialog
Title "Select NPI & Links file"

' Create box around menu
Control GroupBox 
		Title "Input" 
		Position 5, 5 Width 240 Height 60

Control StaticText
	Title "Links File:"
	Position 20,20

Control EditText
	Value ""
	Width 150
	Position 60,20
	Into UsrLinksFileLoc
	ID 1
	
Control Button
	Title "&..."
	Calling GetAccessfileLINK
	Position 220,20
	Width 20


Control StaticText
	Title "NPI File:"
	Position 20,45

Control EditText
	Value ""
	Width 150
	Position 60,45
	Into UsrNPIFileLoc
	ID 2
	
Control Button
	Title "&..."
	Calling GetAccessFileNPI
	Position 220,45 
	Width 20

Control OKButton
	Position 200,70
Control CancelButton
	Position 150,70

If CommandInfo(CMD_INFO_DLG_OK) Then

	open table UsrLinksFileLoc as Links
	open table UsrNPIFileLoc as NPI
	
	'Debug 
	'open table "G:\Geospatial\GIS\JohnW\NPI\Sample_Links.tab" as Links
	'open table "G:\Geospatial\GIS\JohnW\NPI\Sample_NPILinks.tab" as NPI
	'open table "G:\Geospatial\GIS\JohnW\NPI\Links.tab" as Links
	'open table "G:\Geospatial\GIS\JohnW\NPI\NPILinks.TAB" as NPI
	
	Dim TempTableLocation as String
	TempTableLocation= "C:\Temp\TempTable.tab"
	
	Select * from Links where RowID = 1 Into DeleteMe
	Commit Table DeleteMe as "G:\Geospatial\GIS\JohnW\NPI\Links_Validated.TAB"
	Close Table DeleteMe
	Open Table "G:\Geospatial\GIS\JohnW\NPI\Links_Validated.TAB" as LinksValidated
	Delete from LinksValidated
	
	
	'Remove the temp table if it exist
	If fileExists(TempTableLocation)then
		Open Table TempTableLocation as DeleteMe
		Drop Table DeleteMe
	End If
	
	Map From NPI,Links
	Set Map Window frontwindow()  Layer 2 Display Global    Global Line (1,2,16711935) 
	Set Map Window frontwindow()  Layer 1 Display Global    Global Line (1,2,65280)   
	
	'Browse all NPI table and run through
	Dim i as Integer
	i = 0 
	Dim j as Integer
	j = 0
	Dim k as Integer
	k = 0 
	Dim RefI As Integer
	Dim CompI As Integer
	RefI = 0
	CompI = 0 
	
	Dim RefObj As Object 
	Dim CompObj As Object
	Dim DistBetwObj As Object
	Dim CombineObj As Object 
	
	Dim firstFetRow as Integer
	Dim secondFetRow as Integer
	Dim thirdFetRow as Integer
	
	Dim zeroDistCounter As Integer
	Dim zeroDistAry(1) As Integer
	Dim zeroDistArySize As Integer
	zeroDistArySize = 0 
	
	Dim Col1LinksTbl As Integer
	Dim Col2LinksTbl As String 
	Dim Col3LinksTbl As String  
	
	Fetch first from NPI
	Do While NOT EOT(NPI)
		firstFetRow = NPI.RowID
		Print "Processing Line "+NPI.Col1+" ...."
		
		Col1LinksTbl = NPI.Col1
		Col2LinksTbl = NPI.Col2
		Col3LinksTbl = NPI.Col3
		
		RefObj = NPI.Obj 'Save current object - Polyline
		'Print ObjectInfo(RefObj,OBJ_INFO_NPNTS)+"  Number of lines in Refline"
		
		'Query 1 for compared line
		'Select * from Links,NPI where Links.Obj Intersects NPI.Obj into FirstQuery   'Change this to select all intersects
		Select * from Links where Links.Obj Intersects RefObj into FirstQuery 
		'Print TableInfo(FirstQuery,TAB_INFO_NROWS) +"  NUMBER OF ROWS"
		
		'if no intersection between lines jump to next row
		If TableInfo(FirstQuery,TAB_INFO_NROWS) > 0 Then    
			
			
			Browse * from FirstQuery
			Commit table FirstQuery as TempTableLocation
			Close table FirstQuery 
			Open Table TempTableLocation as QueryTemp
			
			'Query 2 for compared Line
			'OPTIONS HERE
				'One - check each node for both objects	OR 'Two - find nearest  and see if anything is over 1m
			Fetch first from QueryTemp
			Do While NOT EOT(QueryTemp)
				secondFetRow = QueryTemp.RowID
	
				'Print ObjectInfo(QueryTemp.obj,OBJ_INFO_NPNTS)
				zeroDistCounter = 0 
				'For loop here to check each nodes distace OR a while < 2
				For CompI = 1 To ObjectInfo(QueryTemp.obj,OBJ_INFO_NPNTS) 
					CompObj = CreatePoint(ObjectNodeX(QueryTemp.obj,1,CompI),ObjectNodeY(QueryTemp.obj,1,CompI)) 'Save current object - Point
					
					DistBetwObj = ConnectObjects(RefObj,CompObj,true)
					'Print ObjectLen(DistBetwObj,"m")+" ----  distance between object.  >>> ID:"+Col1LinksTbl ' Debub here
					If ObjectLen(DistBetwObj,"m") = 0 Then 'Counts how many nodes are on reference line
						zeroDistCounter = zeroDistCounter +1
					End If
				Next 		
				
				If zeroDistCounter < numberVerticesReq Then 'If there is no
				'	Print zeroDistCounter +" *** this line is not a valid match!!"
				'	Print "Delete row: "+secondFetRow
					zeroDistArySize = zeroDistArySize+1
					ReDim zeroDistAry(zeroDistArySize)
					zeroDistAry(zeroDistArySize) = secondFetRow
					'Print secondFetRow +" <<"
					'delete from QueryTemp where RowID = secondFetRow 
				End If	
				
				Fetch Rec secondFetRow from QueryTemp
				Fetch Next from QueryTemp
			Loop
			
			'Delete Query 2 
			'Print "Delete the following rowIDs---"
			For j =1 to zeroDistArySize
				'print zeroDistAry(j)
				delete from QueryTemp where RowID = zeroDistAry(j)
			Next
		
			'Save object in table to variable
			Select * from QueryTemp into Selection 
			Objects Combine
			Commit Table QueryTemp
			Pack Table QueryTemp Graphic Data
				
			Select * from QueryTemp into ObjectToSend
			CombineObj = ObjectToSend.obj
			Close Table ObjectToSend
			
			'Insert Into varible in result table
			Insert Into LinksValidated(Obj,ID,Description,Type) values(CombineObj,Col1LinksTbl,Col2LinksTbl,Col3LinksTbl)
			Commit Table LinksValidated
		
			Delete from QueryTemp
			Close table QueryTemp
	
			ReDim zeroDistAry(0)
			zeroDistCounter =0
			zeroDistArySize =0
		Else
			Print "----No Intesection----"
		End If
		 i = i+1
		'Realigns CurrentRow
		Fetch Rec firstFetRow from NPI 
		Fetch Next from NPI
	Loop
	Map from LinksValidated
	Set Map Window frontwindow()  Layer 1 Display Global   Global Line (1,2,255) 
	
	Print "-------------------------------------------------------"
	Print "Succesfully Completed - "+i+"  NPI Polylines validated"
	
End If

End Sub


Sub ImportCSV
Print Chr$(12) 'Clear Output
Close all 

Dim CreateTable As String
Dim CreateTableName As String
Dim Poly_File As String
Dim LogFile As String
Dim LogFilGen As Logical
Dim ReadLine As String
Dim ScRoadsFile As String
Dim ScRoadsName As String
Dim ScRoadsTmpFile As String
Dim LocalGovBdyFile As String

'Attributes
Dim IDAtt As String
Dim DescrAtt As String
Dim TypeAtt As String
Dim CoordsAtt As String

Dim FirCol As Integer
Dim SecCol As Integer
Dim ThirCol As Integer
Dim StringLen As Integer

Dim Quote1 As Integer
Dim Quote2 As Integer 

Dim CordStart As Integer
Dim CordEnd As Integer
Dim CordTemp As String
Dim CordLenth As Integer
Dim CordEndBol As Integer
Dim LatLine,LongLine As Float
Dim CordCounter As Integer
Dim CoordTrue As Logical

Dim StartTimer As Integer
Dim StartTime As Time
Dim StartDate As Date
Dim StartDT As datetime

'Initialise Time
StartTimer = Timer()
StartTime = Time (24)
StartDate = CurDate()
StartDT = MakeDateTime(StartDate,StartTime)

Dim LoopCounter As Integer
LoopCounter =0
Dim StartNode As Integer

Dim Polyline As object
Create Pline Into Variable Polyline 0
Pen MakePen(2, 2, RGB(0, 128, 0))	

'Close all

'User Input
Poly_File = FileOpenDlg("","","csv","Open CSV Table")
CreateTableName	= PathToTableName$(Poly_File) 
LogFile = PathToDirectory$(Poly_File)+"ErrorLog_"+CreateTableName+".log"
CreateTable = FileSaveAsDlg("",CreateTableName,"tab","Save Table")
'ScRoadsFile = FileOpenDlg("\\Metdnw04\DATA2\spatialData\transportation\roads\stateControlled\scRoads","sc_roads","tab","Open State Controlled Rds Table")
'LocalGovBdyFile = FileOpenDlg("\\Metdnw04\DATA2\spatialData\boundaries\lga\","Local_Government_Boundaries","tab","Open State Controlled Rds Table")
'ScRoadsName = PathToTableName$(ScRoadsFile) 
'ScRoadsTmpFile = "C:\Temp\sc_roadsAOI.tab"

'User selects cancel
If Poly_File = "" Or CreateTable = "" Then
Exit Sub
End If

'Log file
Open File LogFile
For Output As #2
LogFilGen = False
Print #2, "-----  Processing Commenced  ----- "
Print #2, "##"+FormatDate$(GetDate(StartDate))+" "+FormatTime$(GetTime(StartTime), "hh:mm:ss.fff tt")
Print #2, ""


OnError Goto CoordinateError
'Create Table 
Create Table CreateTableName
(ID Integer ,Description Char(254), Type Char(100)) 
	File CreateTable
Create Map For CreateTableName
Open Table CreateTable Interactive
		
Open File Poly_File For Input As #1
	Do While Not EOF(1)
		Line Input #1,ReadLine
		If Not EOF(1) Then	
		
			OnError Goto CoordinateError
			LoopCounter = LoopCounter+1
			
			'Separate the line into attributes
			FirCol = InStr(1,ReadLine,",")
			SecCol = InStr(FirCol+1,ReadLine,",")
			ThirCol = InStr(SecCol+1,ReadLine,",")
			StringLen = Len(ReadLine)
		
			Quote1 = InStr(1,ReadLine,chr$(34))
			Quote2 = InStr(Quote1+1,ReadLine,chr$(34))		
			
			IDAtt = Mid$(ReadLine, 1, FirCol-1) 
			DescrAtt = Mid$(ReadLine, FirCol+1,(SecCol-FirCol-1))
			TypeAtt = Mid$(ReadLine, SecCol+1,(ThirCol-SecCol-1))
			
			
			'Mid$(Struct_Description,InStr(1,Struct_Description,"-")+2, InStr(1,Struct_Description,"|") - InStr(1,Struct_Description,"-")-2)
						
			'Coordinate assingment to the third column ",,," and onwards	
			'CoordsAtt = Mid$(ReadLine, ThirCol+1, (StringLen-ThirCol))
			'Coordinate assingment to the first "-" found after second column, till the end of line - Assumes lat be long
			Dim foundSymbol As Integer
			Dim foundCoord As Logical
			
			foundCoord = false
			
			foundSymbol = InStr(SecCol,ReadLine,"-")
			'print Mid$(ReadLine,foundSymbol+1,1)
			
			'Check Lat starts with 1 or 2 (valid coordinate check)
			While(foundCoord = false)
					If (Mid$(ReadLine,foundSymbol+1,1) = "1" or  Mid$(ReadLine,foundSymbol+1,1) = "2") then
						CoordsAtt = Mid$(ReadLine,foundSymbol,StringLen-foundSymbol+1) 
						foundCoord = true
					else
						foundSymbol = InStr(foundSymbol+1,ReadLine,"-")
					End If
			Wend 
			'Print CoordsAtt+"Final"
			'CoordsAtt = Mid$(ReadLine,InStr(SecCol,ReadLine,"-"),StringLen-InStr(SecCol,ReadLine,"-")+1)


			'Check to see if comma falls within a quotation - commas do not separate columns
			If (InStr(1,ReadLine,chr$(34)) > 0) Then
				
				'Reassign values
				If (FirCol > Quote1 and FirCol < Quote2) Then
					FirCol = InStr(Quote2,ReadLine,",")
					SecCol = InStr(FirCol+1,ReadLine,",")
					ThirCol = InStr(SecCol+1,ReadLine,",")
				ElseIf (SecCol > Quote1 and SecCol < Quote2) Then
					SecCol = InStr(Quote2+1,ReadLine,",")
					ThirCol = InStr(SecCol+1,ReadLine,",")
				ElseIf (thirCol > Quote1 and thirCol < Quote2) Then
					ThirCol = InStr(Quote2+1,ReadLine,",")
				End If
				
				IDAtt = Mid$(ReadLine, 1, FirCol-1) 
				DescrAtt = Mid$(ReadLine, FirCol+1,(SecCol-FirCol-1))
				TypeAtt = Mid$(ReadLine, SecCol+1,(ThirCol-SecCol-1))
				
				'CoordsAtt = Mid$(ReadLine, ThirCol+1, (StringLen-ThirCol))
				'Coordinate assingment to the first "-" found after second column	
				CoordsAtt = Mid$(ReadLine,InStr(SecCol,ReadLine,"-"),StringLen-InStr(SecCol,ReadLine,"-"))
			End If
			
			'Print CoordsAtt +"  CoordsAtt"
			'Run through coordinates and separate the mulinodes to generated lines	
			CordLenth = Len(CoordsAtt)
			CordTemp = CoordsAtt
			CordStart = 1
			CordEndBol = 1
			CordCounter = 0
			StartNode = 0
			CoordTrue = False
			'AfterCoordnateErr:
			
			'Create polyline object
			While CordEndBol = 1
				
			CordStart = 1 ' Reinitialise
			CordEnd = InStr(1,CordTemp,";")
			
			'If no ending ; then assing 0 to end Loop
			If CordEnd = 0 Then
				CordEnd = Len(CordTemp)+2
				CordEndBol = 0	
			End If

        	CordTemp = Mid$(CordTemp,CordStart,CordEnd-CordStart)
			LatLine = Left$(CordTemp ,InStr(1,CordTemp,":")-1)
			LongLine = Right$(CordTemp ,Len(CordTemp)-InStr(1,CordTemp,":"))
			
		
			'Validation - Check inside Area of interest check  and
			'Precision Lat >3 Long > 4 (i.e do not include any values truncated)
			'If (LatLine > -30 And LatLine < -8 And LongLine > 130 And LongLine < 160 And len(Str$(LatLine)) > 4 And len(Str$(LongLine)) > 5)  Then
			If (LatLine > -30 And LatLine < -8) And (LongLine > 130 And LongLine < 160 ) Then
			Alter Object Polyline
				Node Add (Right$(CordTemp ,Len(CordTemp)-InStr(1,CordTemp,":")),Left$(CordTemp,InStr(1,CordTemp,":")-1))
				CoordTrue = True
			End If
			
			'Check to see if it is the end of line - No more : in String CordTemp
			CordStart = InStr(1,CordTemp,":")
			CordCounter = CordCounter+CordEnd
			
			'Reset
			CordTemp = Mid$(CoordsAtt,CordCounter+1, Len(CoordsAtt)-CordEnd)
			Wend	
			
		
			Print "Processing "+IDAtt+" ...."
			'If the record has a true cordinate add to row, else print to log file
			If CoordTrue = True Then
				'Insert Records
				 Insert Into CreateTableName (obj,ID,Description,Type)'(ID, Description,Type ,obj)
				 Values (Polyline,IDAtt,DescrAtt,TypeAtt)
			
				 Create Pline Into Variable Polyline 0
				 Pen MakePen(2, 2, RGB(0, 128, 0))
		    	 'Commit table CreateTableName
		     Else 
		     	Open File LogFile
				For Output As #2
				Print #2, "## INVALID Coordiate - See line "+LoopCounter+" below"+ReadLine
				Print #2, LoopCounter
		     	Close File #2
		     	Print "Log File Created"
		     End IF 
			
		End If

			AfterCoordnateErr:
	Loop
Commit table CreateTableName


'Check





'Dim BufferObject As Object
'Dim SQLString As String
'Dim CreateTableObject As String
'Dim BD As Integer
'BD = 20 ' Buffer distance
'
''Select all roads within BCC into temporary table
'Open Table LocalGovBdyFile As LocalGovBdy 'hard Coded remove
'Open Table ScRoadsFile as ScRoadsName 
'Select * from ScRoadsName, LocalGovBdy where LocalGovBdy.ASGC_number = 31000 and sc_roads.obj Intersects LocalGovBdy.obj into Selection ' Remove Hard Code HERE!!  
'Select COL1 from Selection into Selection 'There should be a better way here!!! 
'Commit Table Selection As "C:\Temp\Test.tab"
'Open Table "C:\Temp\Test.tab" as Test
'
''Select from SCRoads Ipswich Hwy (17A), this will remain hard coded
'Select * from ScRoadsName where STREET = "17A" into Selection
'Select COL1 from Selection into Selection
'
''Append results of selection data 
'Insert Into Test
'	Select * from Selection
'Commit Table Test
'
''Temporay Table
'Select * from Test where RowID = 1 Into Selection  
'Commit Table Selection as "C:\Temp\Test2.tab"
'Open Table "C:\Temp\Test2.tab" as Test2
'
'
''Buffer Result Save ' Future works -> remove the adition TEST2 table 
'Create Object As Buffer
'From Test 
'Into Table Test2
'Width BD Units "m"
'Commit Table Test2
'
''Final query -> for roads 17a and BCC region
'SQLString = "Select * from " + CreateTableName + ","+Test2+" where "+CreateTableName+".Obj Intersects "+Test2+".obj into Selection"
'Run Command SQLString
'
'
''Save result and delete temp tables
'Dim ScRoadsInt as String
'ScRoadsInt = PathToDirectory$(Poly_File)+CreateTableName+"_SCRoads.tab"
'Commit Table Selection As ScRoadsInt
'Close Table Selection
'
'Open Table ScRoadsInt As PathToTableName$(ScRoadsInt)
'Map From PathToTableName$(ScRoadsInt),CreateTableName
'Set Map Zoom Entire Layer CreateTableName
'Layer 1 Display Global Global Line (1,2,16776960)

'Exit
Close File #1
Print #2, "-----  Processing Completed in "+TimerPrint(StartTimer)+"  -----" 
Close File #2

If LogFilGen = True Then
	Print "PROCESSED COMPLETED - With Errors, see log file"
Else 
	Print "PROCESSED SUCCESSFUL - No Errors"
	Kill LogFile
End If

'Clean up
'Close Table LocalGovBdy
'Drop Table Test
'Drop Table Test2

Exit Sub

CoordinateError:
Print #2, "## INVALID LINE: "+ LoopCounter
Print #2, ReadLine
Print #2, ""
OnError GoTo 0
LogFilGen = True
Resume AfterCoordnateErr

End Sub

Function TimerPrint(ByVal StartTimer As Integer) As String
	
Dim ElapsedTimer As Integer
ElapsedTimer = Timer()-StartTimer

If ElapsedTimer > 3600 Then 
	TimerPrint = ElapsedTimer/3600 +" Hours"
ElseIf ElapsedTimer > 60 Then
	TimerPrint = ElapsedTimer/60 +" Minutes"
Else
	TimerPrint = ElapsedTimer +" Seconds"
End If	

End Function


'Exit
Sub ExitSub
	End Program
End Sub

'About Sub
Sub AboutSub
Dim message as String

message = "NPI LINKS GENERATION AND VALIDATION "+ versionTxt +"   "+versionDate
message = message + Chr$(13)
message = message + "by Geospatial Technologies"
message = message + Chr$(13)
message = message + Chr$(13)
message = message + "From a CSV file Creates Polyline"
message = message + Chr$(13)
message = message + "Validated LINKS"
Note message

End Sub


